@model SeeFrontendTry002.ViewModels.ResultViewModel
@using SeeFrontendTry002.Models.Enumz
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using SeeFrontendTry002.Utilz
@{
    ViewData["Title"] = "Prediction Results";
    
    // Helper method to get display name from enum
   
    var predictionModels = Enum.GetValues(typeof(PredictionModel)).Cast<PredictionModel>().ToList();
}

<div class="bg-white rounded-xl shadow-md overflow-hidden">
    <div class="p-6">
        <div class="mb-6">
            <h1 class="text-2xl font-bold text-gray-900">Prediction Results</h1>
            <p class="text-sm text-gray-500 mt-1">All estimated efforts for @(string.IsNullOrEmpty(Model.ProjectName) ? "your project" : Model.ProjectName)</p>
        </div>

        <!-- Hidden fields for project and feature IDs -->
        <input type="hidden" id="projectId" value="@Model.ProjectId" />
        <input type="hidden" id="featureId" value="@Model.FeaturesetId" />

        <!-- Filter Section -->
        <div class="bg-gray-50 p-4 rounded-lg mb-6 shadow-sm">
            <h2 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <i class="fas fa-filter text-indigo-500 mr-2"></i>
                Filter Results
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label for="modelType" class="block text-sm font-medium text-gray-700 mb-1">Prediction Model</label>
                    <select id="modelType" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                        <option value="">All Models</option>
                        @foreach (PredictionModel item in predictionModels)
                        {
                            <option value="@item">@(((Enum)item).GetDisplayName())</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label for="startDate" class="block text-sm font-medium text-gray-700 mb-1">From Date</label>
                    <input type="date" id="startDate" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                </div>
                
                <div>
                    <label for="endDate" class="block text-sm font-medium text-gray-700 mb-1">To Date</label>
                    <input type="date" id="endDate" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                </div>
            </div>
            
            <div class="mt-4 flex justify-end">
                <button type="button" id="applyFilters" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <i class="fas fa-sync-alt mr-2"></i>
                    Apply Filters
                </button>
            </div>
        </div>

        <!-- New Prediction Section -->
        <div class="bg-gray-50 p-4 rounded-lg mb-6 shadow-sm">
            <h2 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <i class="fas fa-magic text-indigo-500 mr-2"></i>
                Request New Prediction
            </h2>
            
            <form asp-controller="Prediction" asp-action="PredictExisting" method="post">
                <input type="hidden" name="projectId" asp-for="@Model.ProjectId" />
                <input type="hidden" name="featureId" asp-for="@Model.FeaturesetId" />
                
                <div class="flex items-end gap-4">
                    <div class="flex-grow">
                        <label asp-for="PredictionInputViewModel.PredictionModelName" class="block text-sm font-medium text-gray-700 mb-1">Prediction Model</label>
                        <select asp-for="PredictionInputViewModel.PredictionModelName" name="predictionModel" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            @foreach (PredictionModel item in predictionModels)
                            {
                                <option value="@item" selected="@(item == Model.PredictionInputViewModel.PredictionModelName ? "selected" : null)">
                                    @(((Enum)item).GetDisplayName())
                                </option>
                            }
                        </select>
                    </div>
                    
                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <i class="fas fa-calculator mr-2"></i>
                        Calculate Prediction
                    </button>
                </div>
            </form>
            
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="mt-4 bg-red-50 p-3 rounded-md border border-red-100">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-circle text-red-500"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Results Section -->
        <div class="bg-gray-50 p-6 rounded-lg mb-6 shadow-sm">
            <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <i class="fas fa-chart-line text-indigo-500 mr-2"></i>
                Effort Estimates
            </h2>
            
            @if (Model.Success)
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Delivery</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Engineering</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">DevOps</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">QA</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var result in Model.Results)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <i class="fas fa-brain text-indigo-400 mr-2"></i>
                                            <span class="text-sm text-gray-900">@result.PredictionModel.GetDisplayName()</span>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @result.CreatedAt.ToString("MMM dd, yyyy")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                            @result.DeliveryEffort
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-indigo-100 text-indigo-800">
                                            @result.EngineeringEffort
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                                            @result.DevOpsEffort
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                            @result.QaEffort
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                            @result.TotalEffort
                                        </span>
                                    </td>
                                    @* <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium"> *@
                                    @*     <a href="#" class="text-indigo-600 hover:text-indigo-900" onclick="showResultDetails(@result.ResultId, event)"> *@
                                    @*         <i class="fas fa-eye"></i> *@
                                    @*     </a> *@
                                    @* </td> *@
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex justify-end space-x-2">
                                            <a href="#" class="text-indigo-600 hover:text-indigo-900" onclick="showResultDetails(@result.ResultId, event)" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a href="#" class="text-red-600 hover:text-red-900" onclick="showDeleteResultModal(@result.ResultId, event)" title="Delete Result">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Selected Result Detail Modal/Card (Hidden by default) -->
                <div id="resultDetailCard" class="hidden mt-6 p-6 bg-white rounded-lg border border-gray-200 shadow-md">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">Prediction Detail</h3>
                        <button type="button" onclick="hideResultDetails()" class="text-gray-400 hover:text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div id="resultDetailContent">
                        <!-- Content will be populated via JavaScript -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="bg-blue-100 p-2 rounded-full">
                                            <i class="fas fa-truck-loading text-blue-600"></i>
                                        </div>
                                        <h3 class="ml-3 text-sm font-medium text-gray-900">Delivery</h3>
                                    </div>
                                    <span id="detailDelivery" class="text-xl font-bold text-blue-700">-</span>
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Person-days</p>
                            </div>
                            
                            <div class="bg-indigo-50 p-4 rounded-lg">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="bg-indigo-100 p-2 rounded-full">
                                            <i class="fas fa-code text-indigo-600"></i>
                                        </div>
                                        <h3 class="ml-3 text-sm font-medium text-gray-900">Engineering</h3>
                                    </div>
                                    <span id="detailEngineering" class="text-xl font-bold text-indigo-700">-</span>
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Person-days</p>
                            </div>
                            
                            <div class="bg-purple-50 p-4 rounded-lg">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="bg-purple-100 p-2 rounded-full">
                                            <i class="fas fa-server text-purple-600"></i>
                                        </div>
                                        <h3 class="ml-3 text-sm font-medium text-gray-900">DevOps</h3>
                                    </div>
                                    <span id="detailDevOps" class="text-xl font-bold text-purple-700">-</span>
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Person-days</p>
                            </div>
                            
                            <div class="bg-green-50 p-4 rounded-lg">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="bg-green-100 p-2 rounded-full">
                                            <i class="fas fa-check-circle text-green-600"></i>
                                        </div>
                                        <h3 class="ml-3 text-sm font-medium text-gray-900">QA</h3>
                                    </div>
                                    <span id="detailQA" class="text-xl font-bold text-green-700">-</span>
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Person-days</p>
                            </div>
                        </div>
                        
                        <div class="mt-6 pt-4 border-t border-gray-100">
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="bg-gray-200 p-2 rounded-full">
                                            <i class="fas fa-users text-gray-600"></i>
                                        </div>
                                        <h3 class="ml-3 text-sm font-medium text-gray-900">Total Effort</h3>
                                    </div>
                                    <span id="detailTotal" class="text-xl font-bold text-gray-800">-</span>
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Total person-days</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Latest Results by Model Summary -->
                <div class="mt-8 bg-white rounded-lg border border-gray-200 shadow-sm">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-800">Latest Results by Model</h3>
                    </div>
                    <div class="p-6">
                        @{
                            // Group results by model and take the newest for each
                            var latestByModel = Model.Results
                                .GroupBy(r => r.PredictionModel)
                                .Select(g => g.OrderByDescending(r => r.CreatedAt).First())
                                .ToList();
                        }
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            @foreach (var result in latestByModel)
                            {
                                <div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                                        <div class="flex items-center">
                                            <i class="fas fa-brain text-indigo-500 mr-2"></i>
                                            <h4 class="text-sm font-medium text-gray-900">@result.PredictionModel.GetDisplayName()</h4>
                                        </div>
                                        <p class="text-xs text-gray-500 mt-1">@result.CreatedAt.ToString("MMM dd, yyyy")</p>
                                    </div>
                                    <div class="p-4">
                                        <div class="space-y-2">
                                            <div class="flex justify-between items-center">
                                                <span class="text-xs text-gray-500">Delivery:</span>
                                                <span class="text-sm font-medium text-blue-700">@result.DeliveryEffort</span>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-xs text-gray-500">Engineering:</span>
                                                <span class="text-sm font-medium text-indigo-700">@result.EngineeringEffort</span>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-xs text-gray-500">DevOps:</span>
                                                <span class="text-sm font-medium text-purple-700">@result.DevOpsEffort</span>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-xs text-gray-500">QA:</span>
                                                <span class="text-sm font-medium text-green-700">@result.QaEffort</span>
                                            </div>
                                            <div class="pt-2 mt-2 border-t border-gray-100 flex justify-between items-center">
                                                <span class="text-xs font-medium text-gray-700">Total:</span>
                                                <span class="text-sm font-bold text-gray-900">@result.TotalEffort</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="mt-4 bg-yellow-50 p-4 rounded-lg border border-yellow-100">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-info-circle text-yellow-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-yellow-800">Important Note</h3>
                            <div class="mt-2 text-sm text-yellow-700">
                                <p>These estimates are based on AI predictions and should be used as guidance only. Actual effort may vary based on unforeseen circumstances, changes in requirements, or other factors.</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="bg-red-50 p-4 rounded-lg border border-red-100">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-circle text-red-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800">No Results Found</h3>
                            <div class="mt-2 text-sm text-red-700">
                                <p>@(string.IsNullOrEmpty(Model.ErrorMessage) ? "There are no prediction results for this project and feature set. Try creating a new prediction." : Model.ErrorMessage)</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="mt-8 flex justify-between">
            <a asp-controller="Prediction" asp-action="Index" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-list mr-2"></i>
                Back to Projects
            </a>
            
            <a asp-controller="Prediction" asp-action="Step1" asp-route-projectId="@Model.ProjectId" asp-route-featureId="@Model.FeaturesetId" class="inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-150">
                New Prediction
                <i class="fas fa-plus ml-2"></i>
            </a>
        </div>
    </div>
    <!-- Delete Prediction Result Confirmation Modal -->
    <div id="deleteResultModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg p-6 max-w-md w-full">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900">Confirm Delete</h3>
                <button type="button" onclick="closeDeleteResultModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-6">
                <p class="text-sm text-gray-500">Are you sure you want to delete this prediction result? This action cannot be undone.</p>
                <div class="mt-4 bg-yellow-50 p-3 rounded-md border border-yellow-100">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-yellow-800">Warning</h3>
                            <div class="mt-2 text-sm text-yellow-700">
                                <p>This will permanently delete the selected prediction result.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeDeleteResultModal()" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </button>
                <form id="deleteResultForm" method="post" asp-controller="Prediction" asp-action="DeletePredictionResult">
                    <input type="hidden" id="resultIdToDelete" name="resultId" value="" />
                    <input type="hidden" id="projectIdToKeep" name="projectId" value="@Model.ProjectId" />
                    <input type="hidden" id="featureIdToKeep" name="featureId" value="@Model.FeaturesetId" />
                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <i class="fas fa-trash mr-2"></i>
                        Delete Result
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Success/Error Toast Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div id="successToast" class="fixed top-4 right-4 bg-green-50 p-4 rounded-md border border-green-200 shadow-md z-50">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-green-800">@TempData["SuccessMessage"]</p>
                </div>
                <div class="ml-auto pl-3">
                    <button type="button" onclick="this.parentElement.parentElement.parentElement.remove()" class="inline-flex text-gray-400 hover:text-gray-500">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div id="errorToast" class="fixed top-4 right-4 bg-red-50 p-4 rounded-md border border-red-200 shadow-md z-50">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-red-800">@TempData["ErrorMessage"]</p>
                </div>
                <div class="ml-auto pl-3">
                    <button type="button" onclick="this.parentElement.parentElement.parentElement.remove()" class="inline-flex text-gray-400 hover:text-gray-500">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>

        // Variables for delete modal
        const deleteResultModal = document.getElementById('deleteResultModal');
        const resultIdInput = document.getElementById('resultIdToDelete');

        // Function to show delete confirmation modal
        function showDeleteResultModal(resultId, event) {
            event.preventDefault();
            resultIdInput.value = resultId;
            deleteResultModal.classList.remove('hidden');
            document.body.classList.add('overflow-hidden'); // Prevent scrolling
        }

        // Function to close delete confirmation modal
        function closeDeleteResultModal() {
            deleteResultModal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden'); // Re-enable scrolling
        }

        // Close modal if user clicks outside of it
        window.addEventListener('click', function(event) {
            if (event.target === deleteResultModal) {
                closeDeleteResultModal();
            }
});

        // Hide success/error toasts after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            const successToast = document.getElementById('successToast');
            const errorToast = document.getElementById('errorToast');

            if (successToast) {
                setTimeout(() => {
                    successToast.remove();
                }, 5000);
            }

            if (errorToast) {
                setTimeout(() => {
                    errorToast.remove();
                }, 5000);
            }
});
        
        // Function to show result details
        function showResultDetails(resultId, event) {
            event.preventDefault();
            
            // In a real implementation, you would fetch the details via AJAX
            // For this example, we'll just find the result in the table
            
            const rows = document.querySelectorAll('tbody tr');
            let selectedRow;
            
            for (const row of rows) {
                const cells = row.querySelectorAll('td');
                // Check if this is the row we're looking for (this is a simplified approach)
                if (row.querySelector('a').getAttribute('onclick').includes(resultId)) {
                    selectedRow = row;
                    break;
                }
            }
            
            if (selectedRow) {
                const cells = selectedRow.querySelectorAll('td');
                
                // Update the detail view with values from the selected row
                document.getElementById('detailDelivery').textContent = cells[2].textContent.trim();
                document.getElementById('detailEngineering').textContent = cells[3].textContent.trim();
                document.getElementById('detailDevOps').textContent = cells[4].textContent.trim();
                document.getElementById('detailQA').textContent = cells[5].textContent.trim();
                document.getElementById('detailTotal').textContent = cells[6].textContent.trim();
                
                // Show the detail card
                document.getElementById('resultDetailCard').classList.remove('hidden');
                
                // Scroll to the detail card
                document.getElementById('resultDetailCard').scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
        }
        
        // Function to hide result details
        function hideResultDetails() {
            document.getElementById('resultDetailCard').classList.add('hidden');
        }
        
        // Filter table based on selected model and date range
        function filterTable() {
            const modelType = document.getElementById('modelType').value;
            const startDate = document.getElementById('startDate').value ? new Date(document.getElementById('startDate').value) : null;
            const endDate = document.getElementById('endDate').value ? new Date(document.getElementById('endDate').value) : null;
            
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                let showRow = true;
                const cells = row.querySelectorAll('td');
                
                // Filter by model type
                if (modelType && !cells[0].textContent.trim().includes(modelType)) {
                    showRow = false;
                }
                
                // Filter by date range
                if (showRow && (startDate || endDate)) {
                    const rowDate = new Date(cells[1].textContent.trim());
                    
                    if (startDate && rowDate < startDate) {
                        showRow = false;
                    }
                    
                    if (endDate && rowDate > endDate) {
                        showRow = false;
                    }
                }
                
                // Show or hide row
                row.style.display = showRow ? '' : 'none';
            });
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Setup filter button
            const filterButton = document.getElementById('applyFilters');
            if (filterButton) {
                filterButton.addEventListener('click', filterTable);
            }
            
            // Show success message if we just made a prediction
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('success') === 'true') {
                // Could add a success toast or notification here
                const successElement = document.createElement('div');
                successElement.className = 'fixed top-4 right-4 bg-green-50 p-4 rounded-md border border-green-200 shadow-md';
                successElement.innerHTML = `
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-800">Prediction created successfully!</p>
                        </div>
                        <div class="ml-auto pl-3">
                            <button type="button" class="inline-flex text-gray-400 hover:text-gray-500">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(successElement);
                
                // Remove after 5 seconds
                setTimeout(() => {
                    successElement.remove();
                }, 5000);
                
                // Remove success parameter from URL without page refresh
                window.history.replaceState({}, document.title, window.location.pathname + window.location.search.replace(/[?&]success=true/, ''));
            }
        });
    
    </script>
}